package main

import (
	"encoding/json"
	"net/http"
	"bytes"
	"io"
)

func main() {
	// aliceのパスワードをリセット
	// alice := &User{Id: "alice"}
	// r, _ := passwordReset(alice)
	// fmt.Println(r)

	// aliceの残高を表示
	// alice := &User{Id: "alice", Password: "xxxx"}
	// r, _ := balance(alice)
	// fmt.Println(r)

	// aliceからbobへ1000送金
	// alice := &User{Id: "alice", Password: "xxxx"}
	// bob := &User{Id: "bob"}
	// r, _ := transfer(alice, bob, "1000")
	// fmt.Println(r)
}

type SignupRequest struct {
	Id string `json:"id"`
}
type PasswordResetRequest struct {
	Id string `json:"id"`
}
type TransferRequest struct {
	RecipientID string `json:"recipient_id"`
	Amount      string `json:"amount"`
}
type User struct {
	Id       string
	Password string
}

func balance(user *User) (string, error) {
	res, err := request(http.MethodPost, "http://localhost:8080/balance", nil, user)
	if err != nil {
		return "", err
	}

	return res, nil
}

func transfer(from, to *User, amount string) (string, error) {
	body, err := json.Marshal(TransferRequest{
		RecipientID: to.Id,
		Amount:      amount,
	})
	if err != nil {
		return "", err
	}

	res, err := request(http.MethodPost, "http://localhost:8080/transfer", body, from)
	if err != nil {
		return "", err
	}

	return res, nil
}

func passwordReset(user *User) (string, error) {
	body, err := json.Marshal(PasswordResetRequest{Id: user.Id})
	if err != nil {
		return "", err
	}

	res, err := request(http.MethodPost, "http://localhost:8080/password-reset", body, nil)
	if err != nil {
		return "", err
	}
	return res, nil
}

func request(method, url string, body []byte, user *User) (string, error) {
	client := &http.Client{}
	req, err := http.NewRequest(http.MethodPost, url, bytes.NewBuffer(body))
	if err != nil {
		return "", err
	}

	if user != nil {
		req.Header.Add("X-ID", user.Id)
		req.Header.Add("X-Password", user.Password)
	}

	resp, err := client.Do(req)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	res, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", err
	}

	return string(res), nil
}
